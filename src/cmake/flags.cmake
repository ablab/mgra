# -*- cmake -*-

if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.7")
        message(SEND_ERROR "GCC version must be at least 4.7!")
        return()
    endif()
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    message(SEND_ERROR "Support for Clang will be in next versions!")
    return()
    #if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS "3.2")
        #message(SEND_ERROR "Clang version must be at least 3.2!")
        #return()
    #endif()
else()
    message(SEND_ERROR "You are using an unsupported compiler! Compilation has only been tested with GCC.")
    return()
endif()

#Add common compile flags
add_compile_options(-std=c++11)

# Check build type throughout the script
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    message("Making Debug Configuration...")
    set(MGRA_TESTS_ON true)
    add_compile_options(-g3)
    add_compile_options(-Wall)
    #add_compile_options(-Werror)
    add_compile_options(-Wextra)
    add_compile_options(-pedantic-errors)
else()
    message("Making Release Configuration...")

    if (${CMAKE_BUILD_TYPE} STREQUAL "RelWithDebInfo")
        add_compile_options(-g3)
        add_compile_options(-Wall)
        add_compile_options(-Werror)
        add_compile_options(-Wextra)
        add_compile_options(-pedantic-errors)
    else()
        add_compile_options(-g0)
    endif()

    if (${CMAKE_BUILD_TYPE} STREQUAL "RelWithAsserts" OR ${CMAKE_BUILD_TYPE} STREQUAL "RelWithDebInfo")
        add_definitions(-UNDEBUG)
    else()
        add_definitions(-DNDEBUG)
    endif()

    add_compile_options(-O2)
    add_compile_options(-pipe)
    add_compile_options(-finline-functions)
    add_compile_options(-finline-limit=1000)
endif()